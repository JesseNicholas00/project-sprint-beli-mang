// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JesseNicholas00/BeliMang/repos/merchant (interfaces: MerchantRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	merchant "github.com/JesseNicholas00/BeliMang/repos/merchant"
	gomock "github.com/golang/mock/gomock"
)

// MockMerchantRepository is a mock of MerchantRepository interface.
type MockMerchantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantRepositoryMockRecorder
}

// MockMerchantRepositoryMockRecorder is the mock recorder for MockMerchantRepository.
type MockMerchantRepositoryMockRecorder struct {
	mock *MockMerchantRepository
}

// NewMockMerchantRepository creates a new mock instance.
func NewMockMerchantRepository(ctrl *gomock.Controller) *MockMerchantRepository {
	mock := &MockMerchantRepository{ctrl: ctrl}
	mock.recorder = &MockMerchantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantRepository) EXPECT() *MockMerchantRepositoryMockRecorder {
	return m.recorder
}

// CreateMerchant mocks base method.
func (m *MockMerchantRepository) CreateMerchant(arg0 context.Context, arg1 merchant.Merchant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMerchant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMerchant indicates an expected call of CreateMerchant.
func (mr *MockMerchantRepositoryMockRecorder) CreateMerchant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).CreateMerchant), arg0, arg1)
}
